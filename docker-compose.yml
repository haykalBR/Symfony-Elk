version: '3.3'
services:
 

  php:
    build: ./php7-fpm
    container_name: phpelk
    environment:
        APP_ENV: dev
    volumes:
      - ./app/:/var/www/app/
    networks:
      - web  
  nginx:
    build: ./nginx
    volumes:
      - ./app/:/var/www/app/
      - ./nginx/log:/var/log/nginx  
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.nginx.rule=Host(`www.bi3.local.com`)"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
    ports:
      - 80
      - "8000:80"
    networks:
      - web
  database:
    image: mariadb:10.4
    restart: always
    volumes:
      - mariadb-datastb:/var/lib/mysql
    container_name: database
    environment:
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_USER=${DATABASE_USER}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    networks:
      - web
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    depends_on:
      - database
    ports:
      - 82:80
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=database
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.phpmyadmin.rule=Host(`www.phpmyadmin.local.com`)"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=82"
    networks:
      - web     
  redis:
    image: redis:alpine
    container_name: redis_db
    command: redis-server --appendonly yes
    ports:
      - 6379:6379
    volumes:
      - ./data:/data
    restart: always
    networks:
      - web       

  portainer:
      image: portainer/portainer
      container_name: ELKportainer
      expose:
        - "9000"
      networks:
        - web
      labels:    
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.portainer.rule=Host(`www.portainer.local.com`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000" 
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
        - portainer-data-elk:/data
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
        PASSWORD_ELK: $PASSWORD_ELK
    container_name: elasticsearch
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.elasticsearch.rule=Host(`www.elasticsearch.local.com`)"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"    
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx1024m -Xms1024m"
      ELASTIC_PASSWORD: changeme
    networks:
      - web     
  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
        PASSWORD_ELK: $PASSWORD_ELK
    container_name: logstash    
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
    expose: 
      - "5044"
    environment:
      LS_JAVA_OPTS: "-Xmx1024m -Xms1024m"
    networks:
      - web
    depends_on:
      - elasticsearch      
  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
        PASSWORD_ELK: $PASSWORD_ELK
    container_name: kibana        
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.kibana.rule=Host(`www.kibana.local.com`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"          
    ports:
      - "5601:5601"
    networks:
      - web
    depends_on:
      - elasticsearch      
  filebeat:
    build: ./filebeat
    container_name: filebeat
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./filebeat/config/nginx.yml:/usr/share/filebeat/filebeat.yml
      - ./nginx/log:/var/log/nginx
    networks:
      - web
    depends_on: 
      - logstash
      - elasticsearch
      - kibana
    links: 
      - logstash  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.37.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - web
    labels:
      org.label-schema.group: "monitoring"      
  prometheus:
    image: prom/prometheus:v2.5.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - web
    labels:
     # org.label-schema.group: "monitoring"
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.prometheus.rule=Host(`www.prometheus.local.com`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090" 


  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - web
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
      image: prom/alertmanager
      container_name: alertmanager
      volumes: 
        - ./alertmanager/:/etc/alertmanager/
      command:
        - '--config.file=/etc/alertmanager/config.yml'
        - '--storage.path=/alertmanager'
      restart: unless-stopped
      expose:
        - 9093  
      labels:
        org.label-schema.group: "monitoring"
        
  nodeexporter:
      image: prom/node-exporter:v0.16.0
      container_name: nodeexporter
      user: root
      privileged: true
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
      command:
        - '--path.procfs=/host/proc'
        - '--path.sysfs=/host/sys'
        - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      restart: unless-stopped
      expose:
        - 9100
      networks:
        - web
      labels:
        org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:5.3.4
    container_name: grafana
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    entrypoint: /setup.sh
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false    
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.grafana.rule=Host(`www.grafana.local.com`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"  
    #  org.label-schema.group: "monitoring"      
  netdata:
    restart: always
    hostname: netdata
    image: titpetric/netdata
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    ports:
      - 19999:19999
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - web
  mysql-exporter:
    image: prom/mysqld-exporter
    ports:
      - 9104:9104
    volumes:
     - ./my.cnf:/root/.my.cnf    
    environment: 
      - DATA_SOURCE_NAME=root:root@(localhost:3306)/
    networks:
      - web
  traefik:
    image: traefik:v2.1
    container_name: traefikelk    
    command: 
      - --api.insecure=true 
      - --providers.docker 
      - --providers.docker.exposedByDefault=false 
      - --providers.docker.network=internal
    ports:
      - "80:80"
      - 8080:8080
    networks:
      - web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock      
networks:
  web:
    driver: bridge
   # external: true
volumes:
  elasticsearch:
  portainer-data-elk:
  nginx_data:
  mariadb-datastb:
  prometheus_data: {}
  grafana: {}
